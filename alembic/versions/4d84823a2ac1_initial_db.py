"""Initial db

Revision ID: 4d84823a2ac1
Revises: 
Create Date: 2023-03-05 23:12:16.349177

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import MetaData, Table

# revision identifiers, used by Alembic.
revision = '4d84823a2ac1'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Game',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('peer_id', sa.BigInteger(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    question_table = op.create_table('Question',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('title')
    )
    op.create_table('User',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('vk_id', sa.BigInteger(), nullable=False),
    sa.Column('first_name', sa.Text(), nullable=True),
    sa.Column('last_name', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('vk_id')
    )
    op.create_table('admins',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('vk_id', sa.BigInteger(), nullable=False),
    sa.Column('email', sa.Text(), nullable=False),
    sa.Column('password', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('vk_id')
    )
    answers_table = op.create_table('Answer',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('score', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['Question.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('title')
    )
    op.create_table('RoadMap',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('status', sa.Boolean(), nullable=False),
    sa.Column('game_id', sa.BigInteger(), nullable=True),
    sa.Column('question_id', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['Game.id'], ),
    sa.ForeignKeyConstraint(['question_id'], ['Question.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('Statistic',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('points', sa.BigInteger(), nullable=False),
    sa.Column('failures', sa.BigInteger(), nullable=True),
    sa.Column('game_id', sa.BigInteger(), nullable=True),
    sa.Column('user_id', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['Game.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('GameAnswer',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('answer_id', sa.BigInteger(), nullable=True),
    sa.Column('game_id', sa.BigInteger(), nullable=True),
    sa.Column('user_id', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['answer_id'], ['Answer.id'], ),
    sa.ForeignKeyConstraint(['game_id'], ['Game.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###

    # op.create_table('Question',
    # sa.Column('id', sa.BigInteger(), nullable=False),
    # sa.Column('title', sa.Text(), nullable=False),
    # sa.PrimaryKeyConstraint('id'),
    # sa.UniqueConstraint('title')
    # )
    # meta_q = MetaData(bind=op.get_bind()))
    # meta_a = MetaData(bind=op.get_bind())
    # conn = op.get_bind()
    # temp_log_table = op.create_table()

    # pass in tuple with tables we want to reflect, otherwise whole database will get reflected
    # meta_q.reflect(only=('Question',))
    # meta_q = MetaData(bind=op.get_bind())
    # meta_a.reflect(only=("Answers",))
    # # define table representation
    # question_table = Table('Question', meta_q)
    # answer_table = Table('Answers', meta_q)

    op.bulk_insert(
        question_table,
        [
            {
                'id': 1,
                "title": "Что может неожиданно повыситься?"
            },
            {
                'id': 2,
                "title": "Кто из отечественных артистов мог или может собрать целый зал зрителей, аккомпанируя себе на акустической гитаре?"
            },
        ])
    op.bulk_insert(
        answers_table,
        [
            {
                'id': 1,
                "title": "Температура",
                "score": 32,
                "question_id": 1,
            },
            {
                'id': 2,
                "title": "Давление",
                "score": 25,
                "question_id": 1,
            },
            {
                'id': 3,
                "title": "Курс доллара",
                "score": 19,
                "question_id": 1,
            },
            {
                'id': 4,
                "title": "Зарплата",
                "score": 8,
                "question_id": 1,
            },
            {
                'id': 5,
                "title": "Цены",
                "score": 6,
                "question_id": 1,
            },
            {
                'id': 6,
                "title": "Настроение",
                "score": 5,
                "question_id": 1,
            },
            {
                'id': 7,
                "title": "Высоцкий",
                "question_id": 2,
                "score": 29
            },
            {
                'id': 8,
                "title": "Окуджава",
                "score": 20,
                "question_id": 2,
            },
            {
                'id': 9,
                "title": "Розенбаум",
                "score": 15,
                "question_id": 2,
            },
            {
                'id': 10,
                "title": "Цой",
                "score": 7,
                "question_id": 2,
            },
            {
                'id': 11,
                "title": "Антонов",
                "score": 5,
                "question_id": 2,
            },
            {
                'id': 12,
                "title": "Макаревич",
                "score": 4,
                "question_id": 2,
            },

        ])


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('GameAnswer')
    op.drop_table('Statistic')
    op.drop_table('RoadMap')
    op.drop_table('Answer')
    op.drop_table('admins')
    op.drop_table('User')
    op.drop_table('Question')
    op.drop_table('Game')
    # ### end Alembic commands ###
